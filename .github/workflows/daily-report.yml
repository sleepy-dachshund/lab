name: Daily Update  # The name displayed in GitHub UI

on:  # Defines when this workflow will run
  schedule:  # Runs on a schedule
    - cron: '0 8 * * 1,6'    # 3:00 AM Eastern (8:00 UTC) on Mondays and Saturdays
    - cron: '0 15 * * 1-5'   # 10:00 AM Eastern (15:00 UTC) Monday through Friday
    - cron: '0 18 * * 1-5'   # 1:00 PM Eastern (18:00 UTC) Monday through Friday
    - cron: '30 21 * * 1-5'  # 4:30 PM Eastern (21:30 UTC) Monday through Friday
  workflow_dispatch:  # Allow manual trigger from GitHub UI

jobs:  # Contains all the jobs that will run in this workflow
  email-daily-updates:  # A single job named "email-daily-updates"
    runs-on: ubuntu-latest  # The type of runner to use

    steps:  # Sequential steps for this job
      - name: Checkout repository  # Step name
        uses: actions/checkout@v3  # Uses a pre-built action

      - name: Set up Python
        uses: actions/setup-python@v4
        with:  # Parameters for this action
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./daily_update  # Directory to execute in
        run: |  # Commands to run
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run daily market update script
        working-directory: ./daily_update
        env:  # Environment variables
          VANTAGE_API_KEY: ${{ secrets.VANTAGE_API_KEY }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: python daily_market_update.py

      - name: Run daily ticker update script
        working-directory: ./daily_update
        env:  # Environment variables
          VANTAGE_API_KEY: ${{ secrets.VANTAGE_API_KEY }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          EMAIL_APP_PASSWORD: ${{ secrets.EMAIL_APP_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        run: python daily_ticker_update.py

      - name: Commit updated CSVs
        working-directory: ./daily_update
        run: |
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      
          # stage everything in data/
          git add data/*.csv
          git commit -m "auto: refresh data"  || echo "no changes"   # skip if no changes
          git push
